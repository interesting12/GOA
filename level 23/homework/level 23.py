# # # 1) შექმენით ფუნქცია რომელსაც გადაეცემა 2 რიცხვი. ფუნქციამ უნდა ჩაატაროს ყველა არითმეტიკული მოქმედება ამ ორ რიცხვს შორის.
# # def math(num1, num2):
# #     print(num1 + num2)
# #     print(num1 - num2)
# #     print(num1 * num2)
# #     print(num1 / num2)

# # math(4, 2)


# # # 2) შექმენით ფუნქცია რომელსაც გადაეცემა ორი რიცხვი. ამ ფუნქციამ პირველ რიცხვს მანამ უნდა დაუმატოს მეორე რიცხვი სანამ ჯამი არ გახდება 100ის ტოლი ან 100ზე მეტი.
# # def numbers(number1, number2):
# #     while number1 <= 100:
# #         number1 += number2
# #     return number1

# # print(numbers(10, 10))


# # # 3) შექმენით ფუნქცია რომელიც ამოწმებს რიცხვი კენტია თუ ლუწი.
# # def even_or_odd(numm1):
# #     if numm1 % 2 == 0:
# #         print("Number is even")
# #     else:
# #         print("Number is odd")

# # # 4) შექმენით ფუნქცია რომელსაც გადაეცემა ლისტი. ფუნქციამ უნდა იპოვოს ლისტში უდიდესი რიცხვი.

# # def maximum():
# #     numbers = [1, 2, 3, 4, 5]
# #     print(max(numbers))
# # maximum()

# # # 5) შექმენით ფუნქცია რომელსაც გადაეცემა ლისტი. ფუნქციამ უნდა იპოვოს ამ ლისტში შემავალი რიცხვების ჯამი
# # def sum_of_numbers():
# #     nums = [1, 2, 3, 4, 5, 6]
# #     print(sum(nums))
# # sum_of_numbers()

# # # 6) შექმენით ფუნქცია რომელსაც გადაეცემა სტრინგები და ინტეჯერები რაღაც თანმიმდევრობით. ფუნქციამ უნდა შეძლოს და ეს სტრინგების და ინტეჯერების თანმიმდევრობა უნდა გამოიტანოს შებრუნებულად.
# # def strings_and_integers():
# #     list1 = [1, "sda", 3, "asda", 4]
# #     print(list1[::-1])

# # strings_and_integers()

# # # 7) შექმენით ფუნქცია რომელსაც გადაეცემა სტრინგების ლისტი. ამ ფუნქციამ უნდა იპოვოს ყველაზე გრძელი და ყველაზე მოკლე სტრინგები ამ ლისტში.
# # def shortest_longest():
# #     strings = ["normal", "short", "loooooong"]
# #     longest = max(strings, key=len)
# #     shortest = min(strings, key=len)
# #     print(longest)
# #     print(shortest)

# # shortest_longest()

# # # 8) შექმენით ფუნქცია რომელსაც გადაეცემა რაიმე სტრინგი. ამ ფუნქციამ უნდა შეძლოს და თითოეული ასო შეცვალოს (პატარა ასო დიდი ასოთ a-A ხოლო დიდი ასო პატარათი A-a).
# # def string():
# #     str = "hello"
# #     print(str.upper())
# # string()
# # # 9) შექმენით ფუნქცია რომელსაც გადაეცემა სტრინგი. ამ ფუნქციის მეშვეობით უნდა დაითვალოთ თანხმოვნების რაოდენობა ამ სტრინგში.

# # #   10) შექმენით ფუნქცია რომელსაც გადაეცემა ინტეჯერი და თუ ლუწია აბრუნებს True-ს ხოლო თუ კი კენტია აბრუნებს False
# # def integer():
# #     innt = int(input("Enter number: "))
# #     if innt % 2 == 0:
# #         return True
# #     else:
# #         return False
# # print(integer())





# 11)შექმენით ფუნქცია, რომელსაც გადაეცემა მთელი რიცხვების სია. თქვენი დავალებაა, რომ ამ სიის ლუწ ინდექსებზე მყოფი რიცხვების ჯამი დააბრუნოთ. აუცილებლად გამოიყენეთ return ამ და ასევე შემდეგ დავალებებში.
# def integers ():
#     intts = [1, 2, 3, 4, 5, 6]
#     first = intts[2]
#     second = intts[4]
#     print(first + second)
# integers()
# # 12)შექმენით ფუნქცია, რომელსაც გადაეცემა მთელი რიცხვი. თქვენი დავალებაა, რომ დააბრუნოთ ლუწია თუ კენტი ის.
# def ddss():
#     dd = 5
#     if dd % 2 == 0:
#         return "Is even"
#     else:
#         return "Is odd"
# print(ddss())
# 13)შექმენით ფუნქცია, რომელიც დააბრუნებს მარტივია თუ არა რიცხვი (მარტივია რიცხვი, თუ მას მარტო ორი გამყოფი აქვს).



# 14)შექმენით ფუნქცია, რომელსაც გადაეცემა სახელების სია. თქვენი დავალებაა, რომ დააბრუნოთ ამ სიის განახლებული ვერსია, სადაც ყველა სახელი დიდი ასოთი დაიწყება.

# def uppered_names():
#     names = ["gio", "lasha", "luka"]
#     print(names[0].upper())
#     print(names[1].upper())
#     print(names[2].upper())
# uppered_names()
    
# 15)შექმენით ფუნქცია, რომელსაც გადაეცემა მთელი რიცხვების სია. შემდეგ გამოიყენეთ ციკლი, რათა განიხილოთ ამ სიის ყველა რიცხვი - თუ რიცხვი ლუწია, ახალ სიაში დაამატეთ მისი განაყოფი ორზე, ხოლო თუ კენტია, მაშინ რიცხვის ნამრავლი ორზე. საბოლოოდ დააბრუნეთ განახლებული სია/ 

# 16)შექმენით ფუნქცია, რომელსაც გადაეცემა სტრინგი და დააბრუნეთ ეს სტრინგდი შებრუნებულ + დიდი ასოებით (reversed / upper). 
def sfs():
    ddg = "hello"
    print(ddg [::-1])
    print(ddg.upper())
sfs()
# 17)შექმენით ფუნქცია რომელსაც გადაეცემა სია შემდგარი სტრინგებისგან ---> (["dato" , "nika" , "polieqtori" , "zaza"....)], დამატებით შექმენით ორი სია odd = [] და even = [], გადაუარეთ ორიგინალ სიას for ციკლით და გაიგეთ რომელი ელემენტი შედგება კენტი ასოებისგან და რომელი ლუწი, საბოლოოდ ჩაამატეთ შესაბამისი სტრინგები შესაბამის სიებში (odd / even) დიდ ასოებათ (upper) და ბოლოს დაბეჭდეთ. 

# 18) შექმენით ფუნქცია რომელსაც გადაეცემა სია შემდგარი სტრინგებისგან, გადაუარეთ ამ სიას და შეამოწმეთ თუ მისი characterების რაოდენობა არის ლუწი, ჩაამატეთ ეს კონკრეტული სიის ელემენტი ახალ ცარიელ სიაში და გადააკეთეთ იგი upper ფუნქციით, თუ იქნება ამ სტრინგის ასოების რაოდენობა კენტი, ჩაამატეთ ეს ელემენტი ახალ სიაში რომელსაც პირველი character ექნება გადიდებული, დანარჩენი პატარა. საბოლოოდ გამოიტანეთ ეს სია. 
def sss():
    strings = ["hello", "bye", "dsa", ]
    even_strings = []
    odd_strings = []
    first = len(strings[0])
    second = len(strings[1])
    third = len(strings[2])

    if first % 2 == 0:
        even_strings.append(first)
    elif second % 2 == 0:
        even_strings.append(second)
    elif third % 2 == 0:
        even_strings.append(third)
    else:
        odd_strings.append(strings)

    print(even_strings)
    print(odd_strings)
        
sss()

    


# 19) შექმენით ფუნქცია რომელსაც გადაეცემა სია შემდგარი ყველანაირი სტრინგისგან (დიდი ასოებით / პატარა ასოებით : "dato" , "LUKA") , გადაურეთ ამ სიას და თუ ეს კონკრეტული ელემენტი არის შემდგარი დიდი ასოებისგან, დაამატეთ სიაში ისე როგორც lower, ხოლო თუ შედგება პატარა ასოებისგან დაამატეთ სიაში ისე როგორც upper / !HINT : გადახედეთ ფუნქციებს, isupper() და islower()! 

# 20)შექმენით ფუნქცია რომელსაც გადაეცემა სტრინგი, ამ სტრინგზე გამოიყენეთ find() ფუნქცია და თუ find ფუნქცია დააბრუნებს ლუწ ინდექს მაშინ ეს სტრინგი დააბრუნეთ დიდი ასოებით (upper) ხოლო თუ დააბრუნებს კენტ ინდექსს, მაშინ დააბრუნეთ ეს სტრინგი რომლის პირველი ასოც იქნება დიდი (capitalize) 